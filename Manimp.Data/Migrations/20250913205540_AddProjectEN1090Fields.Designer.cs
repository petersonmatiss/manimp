// <auto-generated />
using System;
using Manimp.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manimp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250913205540_AddProjectEN1090Fields")]
    partial class AddProjectEN1090Fields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Manimp.Auth.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Manimp.Shared.Models.Assembly", b =>
                {
                    b.Property<int>("AssemblyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssemblyId"));

                    b.Property<int>("AssemblyListId")
                        .HasColumnType("int");

                    b.Property<string>("AssemblyMark")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ManufacturingCompleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufacturingNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ManufacturingStarted")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProgressPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("AssemblyId");

                    b.HasIndex("AssemblyListId");

                    b.HasIndex("AssemblyMark");

                    b.HasIndex("ManufacturingCompleted");

                    b.HasIndex("ManufacturingStarted");

                    b.HasIndex("ProgressPercentage");

                    b.ToTable("Assemblies");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyCoating", b =>
                {
                    b.Property<int>("AssemblyCoatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssemblyCoatingId"));

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssemblyId")
                        .HasColumnType("int");

                    b.Property<int>("CoatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("SurfaceArea")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("AssemblyCoatingId");

                    b.HasIndex("AppliedDate");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("CoatingId");

                    b.HasIndex("Status");

                    b.ToTable("AssemblyCoatings");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyList", b =>
                {
                    b.Property<int>("AssemblyListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssemblyListId"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrmProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UploadFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AssemblyListId");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("CrmProjectId");

                    b.ToTable("AssemblyLists");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyOutsourcing", b =>
                {
                    b.Property<int>("AssemblyOutsourcingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssemblyOutsourcingId"));

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssemblyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpectedReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("AssemblyOutsourcingId");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("ExpectedReturnDate");

                    b.HasIndex("SentDate");

                    b.HasIndex("Status");

                    b.HasIndex("SupplierId");

                    b.ToTable("AssemblyOutsourcings");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyPart", b =>
                {
                    b.Property<int>("AssemblyPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssemblyPartId"));

                    b.Property<int>("AssemblyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AssemblyPartId");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("PartId");

                    b.HasIndex("AssemblyId", "PartId")
                        .IsUnique();

                    b.ToTable("AssemblyParts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyPartBolt", b =>
                {
                    b.Property<int>("AssemblyPartBoltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssemblyPartBoltId"));

                    b.Property<int>("AssemblyPartId")
                        .HasColumnType("int");

                    b.Property<int>("BoltId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AssemblyPartBoltId");

                    b.HasIndex("AssemblyPartId");

                    b.HasIndex("BoltId");

                    b.ToTable("AssemblyPartBolts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Bolt", b =>
                {
                    b.Property<int>("BoltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoltId"));

                    b.Property<string>("BoltSpec")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Diameter")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Finish")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(8,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("BoltId");

                    b.HasIndex("BoltSpec")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Diameter", "Length", "Grade");

                    b.ToTable("Bolts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Coating", b =>
                {
                    b.Property<int>("CoatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoatingId"));

                    b.Property<string>("CoatingType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CostPerSquareMeter")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ThicknessMicrons")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("CoatingId");

                    b.HasIndex("CoatingType");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Coatings");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Email");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsPrimary");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CrmProject", b =>
                {
                    b.Property<int>("CrmProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CrmProjectId"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DeliveryRules")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("PlannedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProjectValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CrmProjectId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PlannedDeliveryDate");

                    b.HasIndex("ProjectCode")
                        .IsUnique()
                        .HasFilter("[ProjectCode] IS NOT NULL");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.ToTable("CrmProjects");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultDeliveryAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyName");

                    b.HasIndex("CustomerCode")
                        .IsUnique()
                        .HasFilter("[CustomerCode] IS NOT NULL");

                    b.HasIndex("IsActive");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CuttingList", b =>
                {
                    b.Property<int>("CuttingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingListId"));

                    b.Property<int>("CrmProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("GeneratedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CuttingListId");

                    b.HasIndex("CrmProjectId");

                    b.HasIndex("GeneratedUtc");

                    b.ToTable("CuttingLists");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CuttingListEntry", b =>
                {
                    b.Property<int>("CuttingListEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingListEntryId"));

                    b.Property<int>("AssemblyId")
                        .HasColumnType("int");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CutLength")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("CutSequence")
                        .HasColumnType("int");

                    b.Property<int>("CuttingListId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SourceProfileInventoryId")
                        .HasColumnType("int");

                    b.HasKey("CuttingListEntryId");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("CutSequence");

                    b.HasIndex("CuttingListId");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("PartId");

                    b.HasIndex("SourceProfileInventoryId");

                    b.ToTable("CuttingListEntries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrmProjectId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveredBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeliveryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("PlannedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("ActualDeliveryDate");

                    b.HasIndex("CrmProjectId");

                    b.HasIndex("DeliveryNumber")
                        .IsUnique();

                    b.HasIndex("PlannedDeliveryDate");

                    b.HasIndex("Status");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UploadedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Manimp.Shared.Models.MaterialType", b =>
                {
                    b.Property<int>("MaterialTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MaterialTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PackingList", b =>
                {
                    b.Property<int>("PackingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackingListId"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PackingListNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PackingListId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("PackingListNumber")
                        .IsUnique();

                    b.HasIndex("Purpose");

                    b.ToTable("PackingLists");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PackingListEntry", b =>
                {
                    b.Property<int>("PackingListEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackingListEntryId"));

                    b.Property<int?>("AssemblyId")
                        .HasColumnType("int");

                    b.Property<int?>("AssemblyOutsourcingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PackingListId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PackingListEntryId");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("AssemblyOutsourcingId");

                    b.HasIndex("PackingListId");

                    b.ToTable("PackingListEntries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProfileTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SteelGradeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeightPerPiece")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PartId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.HasIndex("ProfileTypeId");

                    b.HasIndex("SteelGradeId");

                    b.HasIndex("MaterialTypeId", "ProfileTypeId", "SteelGradeId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceQuote", b =>
                {
                    b.Property<int>("PriceQuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceQuoteId"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PriceRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuoteNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("PriceQuoteId");

                    b.HasIndex("QuoteDate");

                    b.HasIndex("QuoteNumber");

                    b.HasIndex("Status");

                    b.HasIndex("SupplierId");

                    b.HasIndex("PriceRequestId", "SupplierId");

                    b.ToTable("PriceQuotes");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceRequest", b =>
                {
                    b.Property<int>("PriceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceRequestId"));

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PriceRequestId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("RequestNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("SupplierId");

                    b.ToTable("PriceRequests");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceRequestLine", b =>
                {
                    b.Property<int>("PriceRequestLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceRequestLineId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PriceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SteelGradeId")
                        .HasColumnType("int");

                    b.HasKey("PriceRequestLineId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ProfileTypeId");

                    b.HasIndex("SteelGradeId");

                    b.HasIndex("PriceRequestId", "LineNumber")
                        .IsUnique();

                    b.ToTable("PriceRequestLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileInventory", b =>
                {
                    b.Property<int>("ProfileInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileInventoryId"));

                    b.Property<int?>("CertificateDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("CertificateType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManufacturingRoute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaterialBatch")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialStandard")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MillTestCertificateNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OriginalPieces")
                        .HasColumnType("int");

                    b.Property<string>("PONumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PiecesOnHand")
                        .HasColumnType("int");

                    b.Property<int>("ProfileTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SteelGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SurfaceCondition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TraceabilityNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WeightPerPiece")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ProfileInventoryId");

                    b.HasIndex("CertificateDocumentId");

                    b.HasIndex("CertificateType");

                    b.HasIndex("Location");

                    b.HasIndex("LotNumber");

                    b.HasIndex("MaterialBatch");

                    b.HasIndex("MillTestCertificateNumber");

                    b.HasIndex("ProfileTypeId");

                    b.HasIndex("ReceivedDate");

                    b.HasIndex("SteelGradeId");

                    b.HasIndex("ProjectId", "ReceivedDate");

                    b.HasIndex("PurchaseOrderId", "ReceivedDate");

                    b.HasIndex("SupplierId", "ReceivedDate");

                    b.HasIndex("MaterialTypeId", "ProfileTypeId", "SteelGradeId");

                    b.ToTable("ProfileInventories");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileRemnantInventory", b =>
                {
                    b.Property<int>("ProfileRemnantInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileRemnantInventoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OriginalProfileInventoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileUsageLogId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingLength")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("RemnantLotNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RemnantPieces")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProfileRemnantInventoryId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("OriginalProfileInventoryId");

                    b.HasIndex("ProfileUsageLogId");

                    b.HasIndex("RemnantLotNumber")
                        .IsUnique();

                    b.ToTable("ProfileRemnantInventories");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileType", b =>
                {
                    b.Property<int>("ProfileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProfileTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProfileTypes");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileUsageLog", b =>
                {
                    b.Property<int>("ProfileUsageLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileUsageLogId"));

                    b.Property<decimal?>("LengthUsed")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PiecesUsed")
                        .HasColumnType("int");

                    b.Property<int>("ProfileInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UsedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProfileUsageLogId");

                    b.HasIndex("ProfileInventoryId");

                    b.HasIndex("UsedBy");

                    b.HasIndex("UsedDate");

                    b.HasIndex("ProjectId", "UsedDate");

                    b.ToTable("ProfileUsageLogs");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("CreatedMonth")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExecutionClass")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProjectTier")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedMonth");

                    b.HasIndex("ExecutionClass");

                    b.HasIndex("ProjectTier");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("PONumber")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PurchaseOrderLine", b =>
                {
                    b.Property<int>("PurchaseOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderLineId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("LineTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceRequestLineId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SteelGradeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PurchaseOrderLineId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("PriceRequestLineId");

                    b.HasIndex("ProfileTypeId");

                    b.HasIndex("SteelGradeId");

                    b.HasIndex("PurchaseOrderId", "LineNumber")
                        .IsUnique();

                    b.ToTable("PurchaseOrderLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.SteelGrade", b =>
                {
                    b.Property<int>("SteelGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SteelGradeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SteelGradeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SteelGrades");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Manimp.Shared.Models.Assembly", b =>
                {
                    b.HasOne("Manimp.Shared.Models.AssemblyList", "AssemblyList")
                        .WithMany("Assemblies")
                        .HasForeignKey("AssemblyListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyList");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyCoating", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Assembly", "Assembly")
                        .WithMany("AssemblyCoatings")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Coating", "Coating")
                        .WithMany("AssemblyCoatings")
                        .HasForeignKey("CoatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("Coating");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyList", b =>
                {
                    b.HasOne("Manimp.Shared.Models.CrmProject", "CrmProject")
                        .WithMany("AssemblyLists")
                        .HasForeignKey("CrmProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrmProject");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyOutsourcing", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Assembly", "Assembly")
                        .WithMany("AssemblyOutsourcings")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyPart", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Assembly", "Assembly")
                        .WithMany("AssemblyParts")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Part", "Part")
                        .WithMany("AssemblyParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyPartBolt", b =>
                {
                    b.HasOne("Manimp.Shared.Models.AssemblyPart", "AssemblyPart")
                        .WithMany("AssemblyPartBolts")
                        .HasForeignKey("AssemblyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Bolt", "Bolt")
                        .WithMany("AssemblyPartBolts")
                        .HasForeignKey("BoltId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssemblyPart");

                    b.Navigation("Bolt");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Coating", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Contact", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CrmProject", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Customer", "Customer")
                        .WithMany("CrmProjects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CuttingList", b =>
                {
                    b.HasOne("Manimp.Shared.Models.CrmProject", "CrmProject")
                        .WithMany()
                        .HasForeignKey("CrmProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrmProject");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CuttingListEntry", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Assembly", "Assembly")
                        .WithMany()
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.CuttingList", "CuttingList")
                        .WithMany("CuttingListEntries")
                        .HasForeignKey("CuttingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Part", "Part")
                        .WithMany("CuttingListEntries")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.ProfileInventory", "SourceProfileInventory")
                        .WithMany()
                        .HasForeignKey("SourceProfileInventoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Assembly");

                    b.Navigation("CuttingList");

                    b.Navigation("Part");

                    b.Navigation("SourceProfileInventory");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Delivery", b =>
                {
                    b.HasOne("Manimp.Shared.Models.CrmProject", "CrmProject")
                        .WithMany("Deliveries")
                        .HasForeignKey("CrmProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrmProject");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PackingList", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Delivery", "Delivery")
                        .WithMany("PackingLists")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PackingListEntry", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Assembly", "Assembly")
                        .WithMany()
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.AssemblyOutsourcing", "AssemblyOutsourcing")
                        .WithMany("PackingListEntries")
                        .HasForeignKey("AssemblyOutsourcingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.PackingList", "PackingList")
                        .WithMany("PackingListEntries")
                        .HasForeignKey("PackingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("AssemblyOutsourcing");

                    b.Navigation("PackingList");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Part", b =>
                {
                    b.HasOne("Manimp.Shared.Models.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.ProfileType", "ProfileType")
                        .WithMany()
                        .HasForeignKey("ProfileTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.SteelGrade", "SteelGrade")
                        .WithMany()
                        .HasForeignKey("SteelGradeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MaterialType");

                    b.Navigation("ProfileType");

                    b.Navigation("SteelGrade");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceQuote", b =>
                {
                    b.HasOne("Manimp.Shared.Models.PriceRequest", "PriceRequest")
                        .WithMany("PriceQuotes")
                        .HasForeignKey("PriceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Supplier", "Supplier")
                        .WithMany("PriceQuotes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PriceRequest");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceRequest", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Project", "Project")
                        .WithMany("PriceRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.Supplier", "Supplier")
                        .WithMany("PriceRequests")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceRequestLine", b =>
                {
                    b.HasOne("Manimp.Shared.Models.MaterialType", "MaterialType")
                        .WithMany("PriceRequestLines")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.PriceRequest", "PriceRequest")
                        .WithMany("PriceRequestLines")
                        .HasForeignKey("PriceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.ProfileType", "ProfileType")
                        .WithMany("PriceRequestLines")
                        .HasForeignKey("ProfileTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.SteelGrade", "SteelGrade")
                        .WithMany("PriceRequestLines")
                        .HasForeignKey("SteelGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("PriceRequest");

                    b.Navigation("ProfileType");

                    b.Navigation("SteelGrade");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileInventory", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Document", "CertificateDocument")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("CertificateDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.MaterialType", "MaterialType")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.ProfileType", "ProfileType")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("ProfileTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Project", "Project")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.SteelGrade", "SteelGrade")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("SteelGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Supplier", "Supplier")
                        .WithMany("ProfileInventories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CertificateDocument");

                    b.Navigation("MaterialType");

                    b.Navigation("ProfileType");

                    b.Navigation("Project");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SteelGrade");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileRemnantInventory", b =>
                {
                    b.HasOne("Manimp.Shared.Models.ProfileInventory", "OriginalProfileInventory")
                        .WithMany("ProfileRemnantInventories")
                        .HasForeignKey("OriginalProfileInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.ProfileUsageLog", "ProfileUsageLog")
                        .WithMany("ProfileRemnantInventories")
                        .HasForeignKey("ProfileUsageLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalProfileInventory");

                    b.Navigation("ProfileUsageLog");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileUsageLog", b =>
                {
                    b.HasOne("Manimp.Shared.Models.ProfileInventory", "ProfileInventory")
                        .WithMany("ProfileUsageLogs")
                        .HasForeignKey("ProfileInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.Project", "Project")
                        .WithMany("ProfileUsageLogs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProfileInventory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Manimp.Shared.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PurchaseOrderLine", b =>
                {
                    b.HasOne("Manimp.Shared.Models.MaterialType", "MaterialType")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.PriceRequestLine", "PriceRequestLine")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PriceRequestLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Manimp.Shared.Models.ProfileType", "ProfileType")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ProfileTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Shared.Models.SteelGrade", "SteelGrade")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("SteelGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("PriceRequestLine");

                    b.Navigation("ProfileType");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SteelGrade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Manimp.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Manimp.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manimp.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Manimp.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Manimp.Shared.Models.Assembly", b =>
                {
                    b.Navigation("AssemblyCoatings");

                    b.Navigation("AssemblyOutsourcings");

                    b.Navigation("AssemblyParts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyList", b =>
                {
                    b.Navigation("Assemblies");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyOutsourcing", b =>
                {
                    b.Navigation("PackingListEntries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.AssemblyPart", b =>
                {
                    b.Navigation("AssemblyPartBolts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Bolt", b =>
                {
                    b.Navigation("AssemblyPartBolts");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Coating", b =>
                {
                    b.Navigation("AssemblyCoatings");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CrmProject", b =>
                {
                    b.Navigation("AssemblyLists");

                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("CrmProjects");
                });

            modelBuilder.Entity("Manimp.Shared.Models.CuttingList", b =>
                {
                    b.Navigation("CuttingListEntries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Delivery", b =>
                {
                    b.Navigation("PackingLists");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Document", b =>
                {
                    b.Navigation("ProfileInventories");
                });

            modelBuilder.Entity("Manimp.Shared.Models.MaterialType", b =>
                {
                    b.Navigation("PriceRequestLines");

                    b.Navigation("ProfileInventories");

                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PackingList", b =>
                {
                    b.Navigation("PackingListEntries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Part", b =>
                {
                    b.Navigation("AssemblyParts");

                    b.Navigation("CuttingListEntries");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceRequest", b =>
                {
                    b.Navigation("PriceQuotes");

                    b.Navigation("PriceRequestLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PriceRequestLine", b =>
                {
                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileInventory", b =>
                {
                    b.Navigation("ProfileRemnantInventories");

                    b.Navigation("ProfileUsageLogs");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileType", b =>
                {
                    b.Navigation("PriceRequestLines");

                    b.Navigation("ProfileInventories");

                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.ProfileUsageLog", b =>
                {
                    b.Navigation("ProfileRemnantInventories");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Project", b =>
                {
                    b.Navigation("PriceRequests");

                    b.Navigation("ProfileInventories");

                    b.Navigation("ProfileUsageLogs");
                });

            modelBuilder.Entity("Manimp.Shared.Models.PurchaseOrder", b =>
                {
                    b.Navigation("ProfileInventories");

                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.SteelGrade", b =>
                {
                    b.Navigation("PriceRequestLines");

                    b.Navigation("ProfileInventories");

                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Manimp.Shared.Models.Supplier", b =>
                {
                    b.Navigation("PriceQuotes");

                    b.Navigation("PriceRequests");

                    b.Navigation("ProfileInventories");

                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
