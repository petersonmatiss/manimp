name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: '**/coverage.cobertura.xml'
        
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Build for analysis
      run: dotnet build --configuration Release --no-restore
      
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Scan filesystem and dependencies for vulnerabilities
    - name: Run Trivy vulnerability scanner (Filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'  # Fail on any vulnerabilities found
        
    # Scan for secrets in the codebase
    - name: Run Trivy secret scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'secret'
        format: 'sarif'
        output: 'trivy-secrets-results.sarif'
        exit-code: '1'  # Fail on any secrets found
        
    # Generate human-readable reports for easier debugging
    - name: Run Trivy vulnerability scanner (Table output)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-report.txt'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    # Upload detailed scan results to GitHub Security
    - name: Upload Trivy filesystem scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem'
        
    - name: Upload Trivy secrets scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-secrets-results.sarif'
        category: 'trivy-secrets'
        
    # Upload human-readable report as artifact for debugging
    - name: Upload Trivy report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-security-report
        path: trivy-report.txt
        retention-days: 30
        
  publish-artifacts:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Publish Web App
      run: dotnet publish Manimp.Web/Manimp.Web.csproj --configuration Release --output ./publish --no-restore
      
    - name: Upload Web App artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-app-${{ github.sha }}
        path: ./publish
        retention-days: 30
        
    - name: Publish API
      run: dotnet publish Manimp.Api/Manimp.Api.csproj --configuration Release --output ./publish-api --no-restore
      
    - name: Upload API artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-${{ github.sha }}
        path: ./publish-api
        retention-days: 30