name: Deploy to Azure Container Apps

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY_NAME: ${{ secrets.ACR_REGISTRY_NAME }}  # Set in GitHub secrets: ACR_REGISTRY_NAME
  IMAGE_NAME: 'manimp-web'
  CONTAINER_APP_NAME: 'manimp-app'
  RESOURCE_GROUP: 'manimp-rg'
  CONTAINER_ENVIRONMENT: 'manimp-env'

jobs:
  build-and-push:
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  container-security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Run Trivy vulnerability scanner on container image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on critical or high vulnerabilities in container
        
    - name: Run Trivy vulnerability scanner on container (Table output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'table'
        output: 'trivy-container-report.txt'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload container scan results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-container-results.sarif'
        category: 'trivy-container'
        
    - name: Upload container security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-container-report
        path: trivy-container-report.txt
        retention-days: 30
        
  deploy-staging:
    needs: [build-and-push, container-security-scan]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.application-url }}
    
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
        
    - name: Deploy to Azure Container Apps (Staging)
      id: deploy
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ env.REGISTRY_NAME }}
        containerAppName: ${{ env.CONTAINER_APP_NAME }}-staging
        resourceGroup: ${{ env.RESOURCE_GROUP }}-staging
        imageToDeploy: ${{ needs.build-and-push.outputs.image-tag }}
        environmentVariables: |
          ASPNETCORE_ENVIRONMENT=Staging
          ConnectionStrings__Directory="${{ secrets.AZURE_SQL_CONNECTION_STRING_STAGING }}"
          ConnectionStrings__SqlServerAdmin="${{ secrets.AZURE_SQL_ADMIN_CONNECTION_STRING_STAGING }}"
          ConnectionStrings__TenantTemplate="${{ secrets.AZURE_SQL_TENANT_TEMPLATE_STAGING }}"
          
    - name: Run Database Migrations
      run: |
        echo "Database migrations for staging environment"
        # Migrations would be run via a separate container or job
        
  deploy-production:
    needs: [build-and-push, container-security-scan, deploy-staging]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.application-url }}
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Container Apps (Production)
      id: deploy
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ env.REGISTRY_NAME }}
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ needs.build-and-push.outputs.image-tag }}
        environmentVariables: |
          ASPNETCORE_ENVIRONMENT=Production
          ConnectionStrings__Directory="${{ secrets.AZURE_SQL_CONNECTION_STRING }}"
          ConnectionStrings__SqlServerAdmin="${{ secrets.AZURE_SQL_ADMIN_CONNECTION_STRING }}"
          ConnectionStrings__TenantTemplate="${{ secrets.AZURE_SQL_TENANT_TEMPLATE }}"
          
    - name: Run Database Migrations
      run: |
        echo "Database migrations for production environment"
        # Migrations would be run via a separate container or job